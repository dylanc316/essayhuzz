'use client';

import React, { useState } from 'react';

interface DropdownAnalysisProps {
  title: string;
  description: string;
  isLoading?: boolean;
  pdfFile: File | null;
}

export default function DropdownAnalysis({ 
  title, 
  description, 
  isLoading, 
  pdfFile 
}: DropdownAnalysisProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  
  const handleToggle = () => {
    setIsOpen(!isOpen);
    
    // If opening and no analysis has been done yet, trigger analysis
    if (!isOpen && !analysisResult && !isAnalyzing && pdfFile) {
      handleAnalyze();
    }
  };
  
  const handleAnalyze = async () => {
    try {
      setIsAnalyzing(true);
      
      // This is a placeholder for the actual API call
      // In a real implementation, you would:
      // 1. Upload the PDF to your backend/API
      // 2. Process it with your AI service
      // 3. Return the analysis results
      
      // Simulating API delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Placeholder result (replace with actual API call)
      let result = '';
      
      if (title === 'Summary') {
        result = 'This is an AI-generated summary of the document. In a production environment, this would be generated by analyzing the content of the uploaded PDF using natural language processing (NLP) techniques. The summary would extract the key themes, main arguments, and conclusions from the document.';
      } else if (title === 'Key Points') {
        result = `• The document discusses several important concepts related to the subject matter.
• Evidence presented supports the main argument through examples and data.
• The author makes connections between different ideas throughout the text.
• Counter-arguments are addressed in the middle section of the document.
• Conclusions are drawn based on the presented evidence and logical reasoning.`;
      } else if (title === 'Critical Analysis') {
        result = 'The argument presented in this document is structured logically, but there are some areas where additional evidence would strengthen the claims. The author effectively uses examples to illustrate key points, though some connections between concepts could be more clearly articulated. Overall, the document presents a reasonably convincing case, with most claims being adequately supported.';
      }
      
      setAnalysisResult(result);
    } catch (error) {
      setAnalysisResult('Error generating analysis. Please try again.');
      console.error('Analysis error:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };
  
  return (
    <div className="mb-4 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
      <button 
        className="flex justify-between items-center w-full p-4 text-left bg-gray-50 dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 transition"
        onClick={handleToggle}
      >
        <div>
          <h3 className="font-medium">{title}</h3>
          <p className="text-sm text-gray-500 dark:text-gray-400">{description}</p>
        </div>
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          className={`w-5 h-5 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      
      {isOpen && (
        <div className="p-4 border-t border-gray-200 dark:border-gray-700">
          {isAnalyzing ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
              <span className="ml-3">Analyzing document...</span>
            </div>
          ) : analysisResult ? (
            <div className="prose dark:prose-invert max-w-none">
              <p>{analysisResult}</p>
            </div>
          ) : (
            <div className="text-center py-6">
              <p className="mb-4 text-gray-500 dark:text-gray-400">Click the button below to analyze this section</p>
              <button 
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
                onClick={handleAnalyze}
              >
                Analyze Now
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
}